var y = Object.defineProperty; var E = (l, e, i) => e in l ? y(l, e, { enumerable: !0, configurable: !0, writable: !0, value: i }) : l[e] = i; var t = (l, e, i) => (E(l, typeof e != "symbol" ? e + "" : e, i), i); (function () { const e = document.createElement("link").relList; if (e && e.supports && e.supports("modulepreload")) return; for (const s of document.querySelectorAll('link[rel="modulepreload"]')) r(s); new MutationObserver(s => { for (const o of s) if (o.type === "childList") for (const a of o.addedNodes) a.tagName === "LINK" && a.rel === "modulepreload" && r(a) }).observe(document, { childList: !0, subtree: !0 }); function i(s) { const o = {}; return s.integrity && (o.integrity = s.integrity), s.referrerPolicy && (o.referrerPolicy = s.referrerPolicy), s.crossOrigin === "use-credentials" ? o.credentials = "include" : s.crossOrigin === "anonymous" ? o.credentials = "omit" : o.credentials = "same-origin", o } function r(s) { if (s.ep) return; s.ep = !0; const o = i(s); fetch(s.href, o) } })(); const g = [{ folder: "New folder", id: 0, date: [{ id: 0, title: "Купить продукты", discription: 'Молоко, хлеб, яйца, овощи. Купить молоко в магазине "Ашан", хлеб в булочной "Хлеб - Соль", яйца на рынке "Дачный", овощи в супермаркете "Перекресток".', date: "2023-12-28", priority: "normal" }, { id: 1, title: "Позвонить врачу", discription: "Напомнить о приеме к терапевту Иванову И.И. Записался на прием на 2023-12-30.", date: "2023-12-29", priority: "urgently" }] }, { folder: "New folder2", id: 1, date: [{ id: 0, title: "Подготовить отчет", discription: "Доклад для начальника о результатах работы за 2023 год. В отчете необходимо проанализировать данные продаж, прибыли и расходов. Отчет нужно оформить в виде презентации.", date: "2023-12-30", priority: "easy" }, { id: 1, title: "Купить продукты", discription: 'Молоко, хлеб, яйца, овощи. Купить молоко в магазине "Ашан", хлеб в булочной "Хлеб - Соль", яйца на рынке "Дачный", овощи в супермаркете "Перекресток".', date: "2023-12-28", priority: "normal" }] }]; class u { constructor() { t(this, "date", "decreasing"); t(this, "priority", "decreasing") } sortlListPriority(e) { console.log("sadffasdasdf"); let i; const r = JSON.parse(localStorage.getItem("date")); return e === "increase" && (i = r.map(s => { let o = [], a = [], n = []; return s.date.forEach(d => { d.priority === "easy" && o.push(d), d.priority === "normal" && a.push(d), d.priority === "urgently" && n.push(d) }), [...o, ...a, ...n] })), e === "decreasing" && (i = r.map(s => { let o = [], a = [], n = []; return s.date.forEach(d => { d.priority === "urgently" && o.push(d), d.priority === "normal" && a.push(d), d.priority === "easy" && n.push(d) }), [...o, ...a, ...n] })), i } sortlListDate(e) { JSON.parse(localStorage.getItem("date")) } deleteCategory(e) { let i = JSON.parse(localStorage.getItem("date")).filter((r, s) => s !== e); console.log(i), localStorage.setItem("date", JSON.stringify(i)) } deletePost(e, i) { let r = JSON.parse(localStorage.getItem("date")), o = r[i].date.filter(a => e !== a.id).map((a, n) => (a.id = n, a)); r[i].date = o, localStorage.setItem("date", JSON.stringify(r)) } addFolder(e) { const i = JSON.parse(localStorage.getItem("date")), r = i.length - 1; console.log(i, r), i.push({ folder: e, id: r, date: [] }), localStorage.setItem("date", JSON.stringify(i)) } addPost(e, i) { let s = JSON.parse(localStorage.getItem("date")).map(o => (o.id === i && o.date.push(e), o)); localStorage.setItem("date", JSON.stringify(s)) } editPost(e, i, r) { console.log(e); let o = JSON.parse(localStorage.getItem("date")).map(a => (a.id === i && (a.date[r] = e), a)); localStorage.setItem("date", JSON.stringify(o)) } sortToday() { } sortWeek() { } sortPeriod() { } } class v { constructor(e) { t(this, "header", this.createElement("header-container", "div")); t(this, "headerContent", this.createElement("header-content", "div")); t(this, "logo", this.createElement("logo-container", "div")); t(this, "logoText", this.createElement("logo-text", "div", "toDoList")); t(this, "logoImg", this.createElement("logo-img", "img", "./pngegg.png")); t(this, "page", this.createElement("page-container", "div")); t(this, "saidbar", this.createElement("saidbar-container", "div")); t(this, "saidbarContent", this.createElement("saidbar-content", "div")); t(this, "saidbarCategory", this.createElement("saidbar-category-container", "div")); t(this, "categoryTitle", this.createElement("category-title", "div", "Папки:")); t(this, "categoryList", this.createElement("category-list", "div")); t(this, "categoryAdd", this.createElement("category-add", "div", "+")); t(this, "saidbarSort", this.createElement("saidbar-sort-container", "div")); t(this, "sortTitle", this.createElement("sort-title", "div", "Сортировка:")); t(this, "sortListPriority", this.createElement("sort-list-priority-container", "div")); t(this, "sortListPriorityText", this.createElement("sort-list-priority-text", "div", "По приоритету ")); t(this, "sortListPriorityImg", this.createElement("sort-list-priority-img", "img", "./sort_icon.png")); t(this, "sortListDate", this.createElement("sort-list-date-container", "div")); t(this, "sortListDateText", this.createElement("sort-list-date-text", "div", "По дате ")); t(this, "sortListDateImg", this.createElement("sort-list-date-img", "img", "./sort_icon.png")); t(this, "saidbarPeriod", this.createElement("saidbar-period-container", "div")); t(this, "periodTitle", this.createElement("period-title", "div", "Период:")); t(this, "saidbarSortAllDay", this.createElement("saidbar-sort-allday", "div", "Все время")); t(this, "saidbarSortToday", this.createElement("saidbar-sort-today", "div", "Сегодня")); t(this, "saidbarSortWeek", this.createElement("saidbar-sort-week", "div", "Неделя")); t(this, "saidbarToFromSortPeriod", this.createElement("sort-sort-to-from-container", "div")); t(this, "saidbarToSortPeriod", this.createElement("saidbar-sort-to", "input")); t(this, "saidbarFromSortPeriod", this.createElement("saidbar-sort-from", "input", "date")); t(this, "saidbarSortPeriodShow", this.createElement("saidbar-sort-show-btn", "button", "Показать")); t(this, "main", this.createElement("main-container", "div")); t(this, "mainContent", this.createElement("main-content", "div")); t(this, "postAdd", this.createElement("post-add", "div", "+")); t(this, "folder", this.createElement("folder-container", "div")); t(this, "folderContent", this.createElement("folder-content", "div")); t(this, "folderInput", this.createElement("folder-input", "input", "Введите название")); t(this, "folderAdd", this.createElement("folder-add", "button", "Добавить")); t(this, "folderCancel", this.createElement("folder-cancel", "button", "Отмена")); t(this, "post", this.createElement("post-container", "div")); t(this, "postContent", this.createElement("post-content", "div")); t(this, "postInputTitle", this.createElement("post-input-title", "input")); t(this, "postTextArea", this.createElement("post-input-textarea", "textarea")); t(this, "postDatePriority", this.createElement("post-date-priority", "div")); t(this, "postDate", this.createElement("post-date", "input")); t(this, "postPrioritySelect", this.createElement("post-priority", "select")); t(this, "postPriorityOption1", this.createElement("post-option", "option", "easy")); t(this, "postPriorityOption2", this.createElement("post-option", "option", "normal")); t(this, "postPriorityOption3", this.createElement("post-option", "option", "urgently")); t(this, "postAddCancel", this.createElement("post-add-cancel", "div")); t(this, "postAdd2", this.createElement("post-add2", "button", "Добавить")); t(this, "postCancel", this.createElement("post-cancel", "button", "Отмена")); t(this, "postEdit", this.createElement("post-container", "div")); t(this, "postEditContent", this.createElement("post-content", "div")); t(this, "postEditInputTitle", this.createElement("post-input-title", "input")); t(this, "postEditTextArea", this.createElement("post-input-textarea", "textarea")); t(this, "postEditDatePriority", this.createElement("post-date-priority", "div")); t(this, "postEditDate", this.createElement("post-date", "input")); t(this, "postEditPrioritySelect", this.createElement("post-priority", "select")); t(this, "postEditPriorityOption1", this.createElement("post-option", "option", "easy")); t(this, "postEditPriorityOption2", this.createElement("post-option", "option", "normal")); t(this, "postEditPriorityOption3", this.createElement("post-option", "option", "urgently")); t(this, "postEditAddCancel", this.createElement("post-add-cancel", "div")); t(this, "postEditAdd2", this.createElement("post-add2", "button", "Редактировать")); t(this, "postEditCancel", this.createElement("post-cancel", "button", "Отмена")); t(this, "postMore", this.createElement("post-container", "div")); t(this, "postMoreContent", this.createElement("post-content", "div")); t(this, "postMoreInputTitle", this.createElement("post-input-title", "div")); t(this, "postMoreTextArea", this.createElement("post-input-textarea", "div")); t(this, "postMoreDatePriority", this.createElement("post-date-priority", "div")); t(this, "postMoreDate", this.createElement("post-date", "div")); t(this, "postMorePriority", this.createElement("post-priority", "div")); t(this, "postMorePriorityText", this.createElement("post-priority-text", "div")); t(this, "postMorePriorityImg", this.createElement("post-priority-img", "img")); t(this, "postMoreAddCancel", this.createElement("post-add-cancel", "div")); t(this, "postMoreCancel", this.createElement("post-cancel", "button", "Закрыть")); t(this, "currentFolder", 0); t(this, "prio", { normal: "обычный", urgently: "срочно", easy: "легкий" }); t(this, "local", JSON.parse(localStorage.getItem("date"))); t(this, "func", new u); t(this, "postEditForm", {}); t(this, "sortingSwitch", "priority"); t(this, "sortDate", "decreasing"); t(this, "sortPriority", "decreasing"); this.root = e } createHeader() { this.logo.append(this.logoText, this.logoImg), this.headerContent.append(this.logo), this.header.append(this.headerContent) } createMainList(e) { this.mainContent.innerHTML = "", this.mainContent.append(this.postAdd), this.local.length !== 0 && this.local[e].date.forEach(i => { this.mainContent.append(this.createPost(i.title, i.priority, i.id)) }) } createMain() { this.createMainList(0), this.postAdd.addEventListener("click", () => { this.post.style.visibility = "visible" }), this.mainContent.append(this.postAdd), this.main.append(this.mainContent) } addCategoryInList() { this.categoryList.innerHTML = "", this.local.length !== 0 && this.local.forEach((e, i) => { this.categoryList.append(this.createCategory(e.folder, i)) }) } createSidebar() { this.addCategoryInList(), this.categoryList.children[0].children[0].classList.add("active-list"), this.categoryAdd.addEventListener("click", () => { this.folder.style.visibility = "visible" }), this.saidbarCategory.append(this.categoryTitle, this.categoryAdd, this.categoryList), this.sortListPriority.append(this.sortListPriorityText, this.sortListPriorityImg), this.sortListDate.append(this.sortListDateText, this.sortListDateImg), this.sortListPriority.addEventListener("click", (e, i) => { }), this.sortListDate.addEventListener("click", (e, i) => { }), this.saidbarSort.append(this.sortTitle, this.sortListPriority, this.sortListDate), this.saidbarToSortPeriod.type = "date", this.saidbarFromSortPeriod.type = "date", this.saidbarToFromSortPeriod.append(this.saidbarToSortPeriod, this.saidbarFromSortPeriod, this.saidbarSortPeriodShow), this.saidbarPeriod.append(this.periodTitle, this.saidbarSortAllDay, this.saidbarSortToday, this.saidbarSortWeek, this.saidbarToFromSortPeriod), this.saidbarContent.append(this.saidbarCategory, this.saidbarSort, this.saidbarPeriod), this.saidbar.append(this.saidbarContent) } removeAddActive(e) { Array.from(this.categoryList.children).forEach(i => { console.log(i), i.children[0].classList.remove("active-list") }), this.categoryList.children[e].children[0].classList.add("active-list"), this.createMainList(e) } removeAddActive2(e) { sortingSwitch = "priority", sortDate = "decreasing", sortPriority = "decreasing" } createCategory(e, i) { const r = this.createElement("list-item-wrap", "div"), s = this.createElement("list-item", "div", e); s.addEventListener("click", (a, n) => { this.currentFolder = i, this.removeAddActive(i) }); const o = this.createElement("list-item-img", "img", "./delete.png"); return o.addEventListener("click", () => { this.func.deleteCategory(i), this.local = JSON.parse(localStorage.getItem("date")), this.addCategoryInList(), this.createMainList(0), this.removeAddActive(0) }), r.append(s, o), r } createFolder() { this.folderCancel.addEventListener("click", () => { this.folderInput.value = "", this.folder.style.visibility = "hidden" }), this.folderAdd.addEventListener("click", () => { console.log("click"), this.folderInput.value.length !== 0 ? (this.func.addFolder(this.folderInput.value), this.local = JSON.parse(localStorage.getItem("date")), this.addCategoryInList(), this.removeAddActive(0), this.folderInput.value = "", this.folder.style.visibility = "hidden") : this.folderInput.style.borderBottom = "1px solid red" }), this.folderContent.append(this.folderInput, this.folderAdd, this.folderCancel), this.folder.append(this.folderContent) } addPost() { this.postInputTitle.placeholder = "Введите заголовок", this.postTextArea.placeholder = "Введите описание", this.postPriorityOption1.textContent = "легкий", this.postPriorityOption2.textContent = "обычный", this.postPriorityOption3.textContent = "срочно", this.postPrioritySelect.append(this.postPriorityOption1, this.postPriorityOption2, this.postPriorityOption3), this.postDate.type = "date", this.postDatePriority.append(this.postDate, this.postPrioritySelect), this.postAdd2.addEventListener("click", () => { console.log(this.local[this.currentFolder].date.length); const e = { id: this.local[this.currentFolder].date.length, title: this.postInputTitle.value, discription: this.postTextArea.value, date: this.postDate.value, priority: this.postPrioritySelect.value }; this.func.addPost(e, this.currentFolder), this.local = JSON.parse(localStorage.getItem("date")), this.mainContent.append(this.createPost(this.postInputTitle.value, this.postPrioritySelect.value, this.local[this.currentFolder].date.length)), this.clearPostForm() }), this.postCancel.addEventListener("click", () => { this.clearPostForm() }), this.postAddCancel.append(this.postAdd2, this.postCancel), this.postContent.append(this.postInputTitle, this.postTextArea, this.postDatePriority, this.postAddCancel), this.post.append(this.postContent) } fillEditingForm(e) { this.postEditForm = this.local[this.currentFolder].date[e], this.postEditInputTitle.value = this.postEditForm.title, this.postEditTextArea.value = this.postEditForm.discription, this.postEditPrioritySelect.value = this.postEditForm.priority, this.postEditDate.value = this.postEditForm.date } showMorePost(e) { this.postEditForm = this.local[this.currentFolder].date[e], this.postEditInputTitle.value = this.postEditForm.title, this.postEditTextArea.value = this.postEditForm.discription, this.postEditPrioritySelect.value = this.postEditForm.priority, this.postEditDate.value = this.postEditForm.date, this.postMoreInputTitle.textContent = this.postEditForm.title, this.postMoreTextArea.textContent = this.postEditForm.discription, this.postMoreDate.textContent = this.postEditForm.date, this.postMorePriorityText.textContent = this.prio[this.postEditForm.priority], this.postMorePriorityImg.src, this.postEditForm.priority === "normal" && (this.postMorePriorityImg.src = "./free-icon-filled-circle-blue.png"), this.postEditForm.priority === "easy" && (this.postMorePriorityImg.src = "./free-icon-filled-circle-green.png"), this.postEditForm.priority === "urgently" && (this.postMorePriorityImg.src = "./free-icon-filled-circle-red.png") } editPost() { this.postEditInputTitle.placeholder = "Введите заголовок", this.postEditTextArea.placeholder = "Введите описание", this.postEditPriorityOption1.textContent = "легкий", this.postEditPriorityOption2.textContent = "обычный", this.postEditPriorityOption3.textContent = "срочно", this.postEditPrioritySelect.append(this.postEditPriorityOption1, this.postEditPriorityOption2, this.postEditPriorityOption3), this.postEditDate.type = "date", this.postEditDatePriority.append(this.postEditDate, this.postEditPrioritySelect), this.postEditAdd2.addEventListener("click", () => { const e = { id: this.postEditForm.id, title: this.postEditInputTitle.value, discription: this.postEditTextArea.value, date: this.postEditDate.value, priority: this.postEditPrioritySelect.value }; this.func.editPost(e, this.currentFolder, this.postEditForm.id), this.local = JSON.parse(localStorage.getItem("date")), this.createMainList(this.currentFolder), this.clearPostEdirForm() }), this.postEditCancel.addEventListener("click", () => { console.log("CCCCCAN"), this.clearPostEdirForm() }), this.postEditAddCancel.append(this.postEditAdd2, this.postEditCancel), this.postEditContent.append(this.postEditInputTitle, this.postEditTextArea, this.postEditDatePriority, this.postEditAddCancel), this.postEdit.append(this.postEditContent) } morePost() { this.postMoreCancel.addEventListener("click", () => { this.postMore.style.visibility = "hidden" }), this.postMorePriority.append(this.postMorePriorityText, this.postMorePriorityImg), this.postMoreDatePriority.append(this.postMoreDate, this.postMorePriority), this.postMoreAddCancel.append(this.postMoreCancel), this.postMoreContent.append(this.postMoreInputTitle, this.postMoreTextArea, this.postMoreDatePriority, this.postMoreAddCancel), this.postMore.append(this.postMoreContent) } clearPostEdirForm() { this.postEdit.style.visibility = "hidden", this.postEditInputTitle.value = "", this.postEditTextArea.value = "", this.postEditDate.value = "", this.postEditPrioritySelect.value = "" } clearPostForm() { this.post.style.visibility = "hidden", this.postInputTitle.value = "", this.postTextArea.value = "", this.postDate.value = "", this.postPrioritySelect.value = "" } createPost(e, i, r) { const s = this.createElement("post-item-wrap", "div"); s.dataset.number = r; const o = this.createElement("post-item-title", "div", e), a = this.createElement("post-item-edit-delete-more", "div"), n = this.createElement("post-item-priority-container", "div"), d = this.createElement("post-item-priority", "div", this.prio[i]), p = this.createElement("post-item-priority-img", "img"); i === "normal" && (p.src = "./free-icon-filled-circle-blue.png"), i === "easy" && (p.src = "./free-icon-filled-circle-green.png"), i === "urgently" && (p.src = "./free-icon-filled-circle-red.png"), n.append(d, p); const c = this.createElement("post-item-edit", "img", "./edit.png"); c.addEventListener("click", () => { this.postMainListEdit = s, this.fillEditingForm(r), this.postEdit.style.visibility = "visible" }); const h = this.createElement("post-item-delete", "img", "./delete.png"); h.addEventListener("click", () => { this.func.deletePost(r, this.currentFolder), this.local = JSON.parse(localStorage.getItem("date")), this.createMainList(this.currentFolder) }); const m = this.createElement("post-item-more", "img", "./more.png"); return m.addEventListener("click", () => { this.showMorePost(r), this.postMore.style.visibility = "visible" }), a.append(n, c, h, m), s.append(o, a), s } generatyPage() { this.createHeader(), this.page.append(this.saidbar, this.main), this.createSidebar(), this.createMain(), this.createFolder(), this.addPost(), this.editPost(), this.morePost(), this.root.append(this.header, this.page, this.folder, this.post, this.postEdit, this.postMore) } createElement(e, i, r = "") { const s = document.createElement(i); return Array.isArray(e) ? s.classList.add(...e) : s.classList.add(e), i === "img" ? s.src = r : i === "option" ? s.value = r : s.textContent = r, s } } JSON.parse(localStorage.getItem("date")) || localStorage.setItem("date", JSON.stringify(g)); JSON.parse(localStorage.getItem("sortingSwitch")) || localStorage.setItem("sortingSwitch", JSON.stringify("priority")); const f = new v(document.querySelector("#app")); f.generatyPage();
